kafka-topics.sh --bootstrap-server localhost:9092 --topic USERS --replication-factor 1 --partitions 1 --create
kafka-console-producer.sh --bootstrap-server localhost:9092 --topic USERS
kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic USERS

SET 'auto.offset.reset'='earliest';
CREATE STREAM users_stream (name VARCHAR, countrycode VARCHAR) WITH (KAFKA_TOPIC='USERS', VALUE_FORMAT='DELIMITED');
SELECT name, countryname FROM users_stream;


CREATE TABLE COUNTRIES_COUNT AS SELECT countrycode, count(*) FROM users_stream GROUP BY countrycode;

SELECT * FROM COUNTRIES_COUNT;

drop stream if exists users_stream delete topic;

drop table COUNTRIES_COUNT;

drop stream if exists users_stream delete topic;

show streams;
show topics; 
show tables;
**************************************************
kafka-topics.sh --bootstrap-server localhost:9092 --topic USERPROFILE --replication-factor 1 --partitions 1 --create;

kafka-console-producer.sh --bootstrap-server localhost:9092 --topic USERPROFILE

{"userid":1000, "firstname":"Alison", "lastname": "ECHEIKH", "countrycode":"TU", "rating": 4.7}

{"userid":9000, "firstname":"Asma", "lastname": "ECHEIKH", "countrycode":"TU", "rating": 3.2}

{"userid":9000, "firstname":"RAE", "lastname": "MPEA", "countrycode":"FR", "rating": 2.4}

CREATE STREAM users_profile (userid INT, firstname VARCHAR, lastname VARCHAR, countrycode VARCHAR, rating DOUBLE) WITH (KAFKA_TOPIC='USERPROFILE', VALUE_FORMAT='JSON');

SELECT userid, firstname FROM users_profile EMIT CHANGES;

describe users_profile;
******************************************************
ksql-datagen schema=/home/kafka/confluent/userprofile.avro format=json topic=USERPROFILE key=userid maxInterval=5000 iterations=100
print 'USERPROFILE' interval 5;

Select TIMESTAMPTOSTRING(rowtime, 'dd/MMM HH:mm') as createtime, CONCAT(firstname, ' ',ucase(lastname)) as full_name FROM users_profile;
*******************************************************************

run script './user_profile_pretty.ksql';
DESCRIBE USER_PROFILE_PRETTY EXTENDED;
DROP stream IF EXISTS USER_PROFILE_PRETTY DELETE TOPIC;
****************************************************************
select up.firstname, up.lastname, up.countrycode, ct.countryname
from USERPROFILE up 
let join COUNTRYTABLE ct on ct.countrycode=up.countrycode;

**************************************************
Build a rekeyed table:
create stream weatherrekeyed as select * from weatherraw partition by city_name;
_________________________________________________________________________________________________________
Repartition a stream: 

Can't join since the number of partition don't match.

Please repartition either one so that the number of partitions match.

create stream driverprofile_rekeyed with (partition=1) as select * from driver_profile partition by driver_name;

describe driverprofile_rekeyed entended;

select dp2.driver_name, ct.countryname, dp2.rating 
from  driverprofile_rekeyed dp2 
left joint countrytable ct on ct.countrycode = dp2.countrycode;

2 streams with topics 1 partition
______________________________________________________________________________________________________________
Merging Streams: 

____________________________________________________________________________________________________________
windowing:
select data_continent, city_name, count(*)
from rr_world 
window tumbling(size 60 seconds)
group by data_continent, city_name; 

Europe   | London | 3
Americas | Fresno | 3

select continent, city_name, COLLECT_LIST(user)
from rr_world
window tumbling (size 60 seconds) 
group by data_continent, city_name; 

Europe   | London | 3 [EVE]
Americas | Fresno | 3 [Judy, Zied]

Select TIMESTAMPTOSTRING(WindowStart(), 'HH:mm:ss'), TIMESTAMPTOSTRING(WindowEnd(), 'HH:mm:ss')
, data_continent
TOPK(city_name, 3)
count(*)
WINDOW TUMBLING (size 1 minute)
GROUP BY data_continent;

00:28:00 | 00:29:00 | Europ | [London, London] | 2
00:28:00 | 00:29:00 | Americas | [Seatle] | 1

00:28:00 | 00:29:00 | Europ | [London, London, Paris] | 5
00:28:00 | 00:29:00 | Americas | [Seatle, San Francisco, San Francisco] | 4
_______________________________________________________________________________________________

show queries; 
ctas => create table as select 
csas => create stream as select
explain csas_my_stream2;
